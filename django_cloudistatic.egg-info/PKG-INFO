Metadata-Version: 2.1
Name: django-cloudistatic
Version: 0.1.dev1
Summary: A Django app to serve staticfiles using cloudinary
Home-page: https://djm-1.github.io/
Author: Dibyajyoti Mondal
Author-email: dibyajyoti.bhs@gmail.com
License: BSD-3-Clause
Platform: UNKNOWN
Classifier: Environment :: Web Environment
Classifier: Framework :: Django
Classifier: Framework :: Django :: 3.2
Classifier: Intended Audience :: Developers
Classifier: License :: OSI Approved :: BSD License
Classifier: Operating System :: OS Independent
Classifier: Programming Language :: Python
Classifier: Programming Language :: Python :: 3
Classifier: Programming Language :: Python :: 3 :: Only
Classifier: Programming Language :: Python :: 3.6
Classifier: Programming Language :: Python :: 3.7
Classifier: Programming Language :: Python :: 3.8
Classifier: Topic :: Internet :: WWW/HTTP
Classifier: Topic :: Internet :: WWW/HTTP :: Dynamic Content
Requires-Python: >=3.6
License-File: LICENSE

===================
django-cloudistatic
===================

django-cloudistatic is a Django app to upload your staticfiles to Cloudinary and serve from there.
Cloudinary serves files using CDN, which will reduce the load on django server and pages will load 
faster.


Quick start
-----------

1. Add "djangocloudistatic" to your INSTALLED_APPS setting like this::

    INSTALLED_APPS = [
        ...
        'djangocloudistatic',
    ]

2. Declare the following settings variables (you will get them from Cloudinary dashboard) ::

      CLOUDI_NAME = <Cloud name>
      CLOUDI_API_KEY = <API Key>
      CLOUDI_API_SECRET = <API Secret> 

3. Include ``STATICFILES_DIRS`` and ``STATIC_ROOT`` in settings.py file (Should be included before ``STATIC_URL``)
   of your project. You may refer to https://docs.djangoproject.com/en/3.2/howto/static-files/ for details.

4. Modify the ``STATIC_URL`` like this::

      STATIC_URL=f'https://res.cloudinary.com/{CLOUDI_NAME}/raw/upload/v1/{STATIC_ROOT}/' 

5. Now run ``python manage.py collectstatic`` command to collect all staticfiles to STATIC_ROOT
   of your project. 

6. Finally, run ``python manage.py cloudistatic`` to upload staticfiles to Cloudinary. Wait for a few minutes
   and your staticfiles will be ready to be served from there. If you want to delete your local STATIC_ROOT (staticfiles will not be served from here now) after
   uploading to cloud, then you should run ``python manage.py cloudistatic --deletelocal`` instead of 
   ``python manage.py cloudistatic``.

